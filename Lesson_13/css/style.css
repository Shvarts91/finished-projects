/* 
&display=swap
&subset=cyrillic-ext 
*/

/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  border: 0;
  box-sizing: border-box;
}
li {
  list-style: none;
}
a,
a:visited {
  text-decoration: none;
}
a:hover {
  text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: inherit;
  font-size: inherit;
}
img {
  vertical-align: top;
}
html,
body {
  height: 100%;
}
html {
  font-size: 16px; /* по умолчанию */
}
body {
  line-height: 1;
  /* color: #000; */
  /* font-family:""; */
  overflow-x: hidden;
  font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
  background-color: rgb(7, 7, 7);
}
.wrapper {
  min-height: 100%;
  padding: 30px;
}
/* ------------------------------ */

/*
CSS – переходы либо CSS – transitions могут применяться ко всем элементам и даже к псевдоэлементам. Используются для оживления нашей верстки. Что в свою очередь приводит к улучшению взаимодействия с пользователем, как правило путем приятной анимированной реакции на его действия. Например – наведение и нажатие на кнопку. Также свойства transition можно использовать для построения несложных сценариев анимации. Фактически, CSS – переходы обеспечивают смену значений других свойств с определенной анимацей и сценарием. Всю эту магию можно описать универсальным CSS свойcтвом transition, либо рядом следующих отдельных свойств: 
*/
/*
.link {
	color: yellow;
	font-size: 14px;
}
.link:hover {
	color: red;
	font-size: 20px;
}
*/
/*
.link_anim {
  
	Определяет промежуток времени, в течение которого должен осуществляться переход. Собственно – тут мы указываем время за которое одно значение свойства по переходит (анимируется) в другое. Свойство не наследуется.
	*/
/* transition-duration: 0.2s; */
/*
	Содержит название CSS-свойств, к которым будет применен эффект перехода. Значение свойства может содержать как одно свойство, так и список свойств через запятую. Свойство не наследуется.	
	*/
/* transition-property: all; */
/*
	Задержка выполнения перехода. Позволяет сделать так, чтобы изменение свойства происходило не моментально, а с некоторой задержкой. Время задержки перехода указывается в секундах или миллисекундах. Свойство не наследуется.
	*/
/* transition-delay: 0s; */
/*
	Задаёт стиль нашего перехода, то есть некий сценарий, по которому будет осуществятся анимация.
	*/
/*
	Переход начинается медленно, разгоняется быстро и замедляется в конце. 
	*/
/* transition-timing-function: ease; */

/* Универсальное свойство */
/* transition: 0.3s; */
/* 
	Порядок значений:
	property duration timing-function delay 
	
}*/
/*
.button {
	display: inline-block;
	color: #fff;
	background-color: green;
	border-radius: 10px;
	padding: 10px 15px;
	box-shadow: 0 5px 0px rgba(0, 0, 0, 0.3);
	transition: all 0.3s ease 0s;
}
.button:hover {
	transform: translate(0px, 3px);
	box-shadow: 0 2px 0px rgba(0, 0, 0, 0.3);
}
*/
/*
.menu {
	overflow: hidden;
	background-color: rgba(255, 255, 255, 0.05);
}
.menu:hover .menu__list {
	transform: translateX(0);
	transition-delay: 0s;
}

.menu:hover .menu__item {
	transform: translateX(0);
}

.menu__list {
	background-color: green;
	padding: 15px;
	transform: translateX(-100%);
	transition: 0.3s;
	transition-delay: 0.8s;
}
.menu__item {
	transform: translateX(-100%);
	transition-duration: 0.6s;
}
.menu__item:nth-child(1) {
	transition-delay: 0s;
}
.menu__item:nth-child(2) {
	transition-delay: 0.2s;
}
.menu__item:nth-child(3) {
	transition-delay: 0.4s;
}
.menu__item:nth-child(4) {
	transition-delay: 0.6s;
}
.menu__item:not(:last-child) {
	margin: 0px 0px 10px 0px;
}
.menu__link {
	color: #fff;
}
*/

/* ================================================================== */

/*
Как и CSS свойство плавных переходов transition, о котором мы говорили в предыдущем уроке, свойство animation призвано сделать нашу верстку более динамичной, оживить её для лучшего взаимодействия с пользователем и создания WOW эффекта.

Но в отличие от CSS переходов, создание анимации базируется на ключевых кадрах @keyframes, которые позволяют автоматически воспроизводить и повторять эффекты на протяжении заданного времени, а также приостанавливать анимацию по определенному событию.

Другими словами, использование конструкции animation и @keyframes позволяет нам создавать более сложные сценарии анимаций.
*/
/*
.block {
	width: 200px;
	height: 200px;
	position: relative;
	background-color: #7a956b;
*/
/*
	Определяет список применяемых к элементу анимаций (ключевых кадров). Можно указать через запятую. Причем приоритет у последней записи.
	
	animation-name: somename;*/
/*
	Отвечает за продолжительность анимации.
	
	animation-duration: 1s;*/
/*
	Задаёт сценарий развития анимации между ключевыми кадрами.

	animation-timing-function: linear;	*/
/*
	Отвечает за задержку перед проигрыванием.
	
	animation-delay: 0s;*/
/*
	Отвечает за повтор проигрывания ключевых кадров.
	
	animation-iteration-count: 1;*/
/*
	Определяет направление и тип проигрывания ключевых кадров.
	
	animation-direction: alternate;*/
/*
	Определяет какие значения анимируемых css свойств применятся к объекту после завершения анимации.
	
	animation-fill-mode: none;*/
/*
	Позволяет запускать или останавливать анимацию по событию.
	
	animation-play-state: running;
}*/
/*
.block:hover {
	animation-play-state: paused;
}
@keyframes somename {
	*/
/*
	0% {
		 css свойства 
		transform: translate(0px, 0px);
	}
	50% {
		background-color: #77608d;
		border-radius: 50%;*/
/*}
	100% {
		 css свойства 
		transform: translate(300px, 0px);
	}
}*/
/*
.crescent {
	margin: 0px 0px 50px 0px;
	border-bottom: 3px solid rgb(43, 43, 43);
}
.crescent__body {
	overflow: hidden;
	width: 500px;
	height: 500px;
	transform-origin: 53.333% 68.666%;
	animation: crescent-anim 5s 1 ease-out 1s forwards;
}
.crescent__item {
	background-color: #fff;
	width: 100%;
	height: 100%;
	border-radius: 50%;
	position: relative;
	animation: crescent-init 1s 1 linear forwards;
}
.crescent__item::before {
	background-color: #333;
	border-radius: 50%;
	content: "";
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	animation: crescent-shadow 1s 1 linear forwards;
}
@keyframes crescent-anim {
	0% {
		transform: rotate(0deg);
	}
	25% {
		transform: rotate(20deg);
	}
	50% {
		transform: rotate(10deg);
	}
	75% {
		transform: rotate(20deg);
	}
	100% {
		transform: rotate(15deg);
	}
}
@keyframes crescent-init {
	0% {
		transform: translate(-30%, 0px);
	}
	100% {
		transform: rotate(45deg) translate(0px, 0px);
	}
}
@keyframes crescent-shadow {
	0% {
		transform: translate(0px, 0px);
	}
	100% {
		transform: translate(-16.666%, 16.666%);
	}
}

.clock {
	border-top: 3px solid rgb(83, 83, 83);
	height: 500px;
	max-width: 900px;
	margin: 0px auto;
}
.clock__item {
	position: relative;
	width: 1px;
}
.clock__item::before {
	content: "";
	position: absolute;
	width: 2px;
	top: 0;
	height: 300px;
	background-color: rgb(83, 83, 83);
	transform-origin: 0 0;
}
.clock__item::after {
	width: 90px;
	height: 90px;
	border-radius: 50%;
	background-color: #fff;
	position: absolute;
	top: 300px;
	left: 0%;
	transform: translate(-50%, 0px);
	content: "";
}
.clock__item:nth-child(1) {
	left: 40%;
	animation: item-1 1s infinite ease-in-out alternate 0s;
}
.clock__item:nth-child(2) {
	left: 50%;
}
.clock__item:nth-child(3) {
	left: 60%;
	animation: item-2 1s infinite ease-in-out alternate 0s;
}

@keyframes item-1 {
	0% {
		transform: rotate(45deg);
	}
	50% {
		transform: rotate(0deg);
	}
}
@keyframes item-2 {
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(-45deg);
	}
}
*/
.main {
  background: rgb(41, 37, 37) url(../img/ulica.jpg);
  height: 540px;
}
.frame {
  width: 1000px;
  padding: 290px 0 0 50px;
  animation: frame 10s linear 1 normal 5s;
}

.frame:hover {
  animation-play-state: paused;
}
@keyframes frame {
  0% {
    transform: translate(0px);
    transform: rotate(-1deg);
  }
  50% {
    transform: translate(1300px);
  }
  100% {
    transform: translate(0px);
  }
}

.frame__footer {
  margin-left: 210px;
  width: 250px;
  height: 0;
  border-bottom: 70px solid #867c42e3;
  border-left: 1px solid transparent;
  border-right: 140px solid transparent;
  position: relative;
  top: 10px;
}
.frame__footer:hover {
  content: "";
  display: inline-block;
  transition: 0.6s;
  transform: translateY(60px);
}
.frame__footer::after {
  display: inline-block;
  content: "";
  height: 65px;
  width: 1px;
  background: #000;
  position: relative;
  top: 1px;
  left: 110px;
}
.frame__body {
  width: 700px;
  height: 120px;
  border-radius: 25% 60% 25% 30%;
  position: relative;
  background: linear-gradient(
    90deg,
    rgba(2, 0, 36, 1) 0%,
    rgba(255, 0, 0, 1) 50%,
    rgba(0, 0, 0, 1) 100%,
    rgba(0, 0, 0, 0.989233193277311) 100%
  );
  transform: skew(20deg);
}
.frame__wheel1 {
  background: rgb(108, 109, 47);
  box-shadow: 1px 1px 1px 15px rgb(0, 0, 0);
  width: 100px;
  height: 100px;
  border: 10px solid #000;
  border-radius: 50%;
  position: relative;
  top: -45px;
  left: 80px;
}
.frame__wheel2 {
  background: rgb(108, 109, 47);
  box-shadow: 1px 1px 1px 15px rgb(0, 0, 0);
  width: 100px;
  height: 100px;
  border: 10px solid #000;
  border-radius: 50%;
  position: relative;
  top: -155px;
  left: 480px;
}
.frame__wheel2::before {
  display: inline-block;
  content: "";
  width: 30px;
  height: 30px;
  border: 3px solid #000;
  border-radius: 50%;
  position: relative;
  z-index: 1;
  top: 23px;
  left: 24px;
  background: #fff;
}
.frame__wheel1::before {
  display: inline-block;
  content: "";
  width: 30px;
  height: 30px;
  border: 3px solid #000;
  border-radius: 50%;
  position: relative;
  z-index: 1;
  top: 23px;
  left: 24px;
  background: #fff;
}

.frame__body::before {
  display: inline-block;
  content: "";
  height: 70px;
  width: 1px;
  background-color: #000;
  border: 1px dashed #000;
  position: relative;
  top: -60px;
  left: 70px;
  transform: rotate(-20deg);
}
.pipe {
  width: 70px;
  height: 15px;
  background: #000;
  position: fixed;
  top: 107px;
  left: -15px;
}
.pipe::before {
  content: "";
  display: inline-block;
  position: fixed;
  top: 107px;
  left: -15px;
  animation: pipe 17s 1 linear 3s;
}
.pipe::before:hover {
  animation-play-state: paused;
}
@keyframes pipe {
  0% {
    box-shadow: -20px 5px 20px 25px rgb(7, 7, 7);
  }
  30% {
    box-shadow: -30px -10px 50px 55px rgb(7, 7, 7);
  }
  60% {
    box-shadow: -40px -20px 70px 75px rgb(7, 7, 7);
  }
  80% {
    box-shadow: -20px -10px 40px 45px rgb(7, 7, 7);
  }
  100% {
    box-shadow: -20px 5px 20px 25px rgb(7, 7, 7);
  }
}

.headlights {
  height: 7px;
  width: 40px;
  background: #000;
  border-radius: 100%;
  position: relative;
  left: 660px;
  transform-origin: 0px 10px;
  transform: rotate(25deg);
  bottom: 35px;
  animation: headlights 20s 1 linear 3s;
}
.headlights:hover {
  animation-play-state: paused;
}
@keyframes headlights {
  0% {
    transform-origin: 0px 10px;
    transform: rotate(-45deg);
  }
  10% {
    box-shadow: 30px 50px 70px 70px yellow;
  }
  50% {
    transform: rotate(-45deg);
  }
  75% {
    transform: rotate(-45deg);
  }
  100% {
    box-shadow: 30px 50px 70px 70px yellow;
  }
}
.headlights:hover {
  box-shadow: 30px 50px 70px 70px yellow;
}
.stop {
  width: 15px;
  height: 25px;
  background: red;
  position: relative;
  bottom: 40px;
  border-radius: 5px;
  animation: stop 20s 1 linear 1s;
}
@keyframes stop {
  0% {
    box-shadow: -10px 1px 20px 20px red;
  }
  100% {
    box-shadow: -10px 1px 20px 20px red;
  }
}
.stop:hover {
  box-shadow: -10px 1px 20px 20px red;
}
.line1 {
  width: 1px;
  height: 100px;
  border-right: 2px solid #000;
  transform: translate(450px, -90px) scale(1.17) rotate(20deg);
}
.line2 {
  height: 150px;
  width: 175px;
  position: relative;
}
.line2:after {
  content: "";
  position: absolute;
  height: 100%;
  width: 100%;
  border: 3px solid transparent;
  border-bottom-color: black;
  bottom: 237px;
  left: 200px;
  border-radius: 50%;
  transform: rotate(70deg);
}
.frame__body::after {
  content: "";
  display: inline-block;
  width: 70%;
  height: 10px;
  background: #000;
  position: fixed;
  bottom: 0px;
}
.doors-knob {
  width: 25px;
  height: 5px;
  background: #000;
  position: fixed;
  bottom: 100px;
  left: 250px;
}
